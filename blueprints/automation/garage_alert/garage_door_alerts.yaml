blueprint:
  name: Garage Door Open Alerts (Custom Messages + Close Button)
  description: >
    Sends friendly mobile notifications and/or Alexa announcements when a garage
    door opens, with follow-up reminders if it stays open. Includes a button to
    close the door from the notification.

    Custom names: Provide a name for Sensor 1 / Sensor 2 (matching the order you
    select the sensors). Leave blank to use the sensor's friendly name.
    Tip: In message/title inputs, use [[ door_name ]] as the placeholder
    (safer than {{ door_name }}).

  domain: automation
  input:
    garage_door_sensors:
      name: Garage Door Sensors (choose in order)
      description: First = sensor 1, Second = sensor 2 (order matters)
      selector:
        entity:
          multiple: true
          domain: binary_sensor

    garage_door_covers:
      name: Matching Cover Entities (same order)
      description: Covers for each sensor, in the same order
      selector:
        entity:
          multiple: true
          domain: cover

    # Optional custom names for each sensor (matched by order)
    custom_name_sensor_1:
      name: Custom name for Sensor 1 (optional)
      description: Leave blank to use Sensor 1's friendly name
      default: ""
      selector:
        text:
    custom_name_sensor_2:
      name: Custom name for Sensor 2 (optional)
      description: Leave blank to use Sensor 2's friendly name
      default: ""
      selector:
        text:

    mobile_notify_service:
      name: Mobile notification service
      description: Select your phone's notify service (e.g., notify.mobile_app_robert_schwarz)
      selector:
        select:
          options:
            - notify.mobile_app_robert_schwarz
          custom_value: true

    alexa_target:
      name: Alexa Device
      description: Alexa media_player entity for announcements (e.g., media_player.kitchen)
      selector:
        entity:
          domain: media_player

    # Custom titles & messages (placeholders supported: [[ door_name ]] or {{ door_name }})
    title_initial:
      name: Initial alert title
      default: "🚪 Garage Alert"
      selector:
        text:
    msg_initial:
      name: Initial alert message
      default: "Hey! [[ door_name ]] was just opened."
      selector:
        text:

    title_first:
      name: First reminder title
      default: "⏱️ Garage Reminder"
      selector:
        text:
    msg_first:
      name: First reminder message
      default: "Heads up! [[ door_name ]] has been open for {{ first_delay }} minutes."
      selector:
        text:

    title_second:
      name: Second reminder title
      default: "⌛ Garage Still Open"
      selector:
        text:
    msg_second:
      name: Second reminder message
      default: "FYI — [[ door_name ]] has been open for {{ second_delay }} minutes."
      selector:
        text:

    close_button_label:
      name: Button label
      default: "Close [[ door_name ]]"
      selector:
        text:

    # Per-incident channel toggles
    send_initial_phone:
      name: Initial alert → Phone
      default: true
      selector:
        boolean:
    send_initial_alexa:
      name: Initial alert → Alexa
      default: true
      selector:
        boolean:
    send_first_phone:
      name: First reminder → Phone
      default: true
      selector:
        boolean:
    send_first_alexa:
      name: First reminder → Alexa
      default: true
      selector:
        boolean:
    send_second_phone:
      name: Second reminder → Phone
      default: true
      selector:
        boolean:
    send_second_alexa:
      name: Second reminder → Alexa
      default: true
      selector:
        boolean:

    # Timers
    first_delay_minutes:
      name: First reminder after (minutes)
      default: 10
      selector:
        number:
          min: 1
          max: 120
          mode: slider
          unit_of_measurement: minutes

    second_delay_minutes:
      name: Second reminder after (minutes total)
      default: 60
      selector:
        number:
          min: 2
          max: 240
          mode: slider
          unit_of_measurement: minutes

trigger:
  - platform: state
    entity_id: !input garage_door_sensors
    from: 'off'
    to: 'on'

mode: parallel
max: 10

action:
  # Pull inputs
  - variables:
      sensor_list: !input garage_door_sensors
      cover_list: !input garage_door_covers
      cover_map: "{{ dict(zip(sensor_list, cover_list)) }}"
      first_delay: !input first_delay_minutes
      second_delay: !input second_delay_minutes

      # toggles
      send_initial_phone: !input send_initial_phone
      send_initial_alexa: !input send_initial_alexa
      send_first_phone:  !input send_first_phone
      send_first_alexa:  !input send_first_alexa
      send_second_phone: !input send_second_phone
      send_second_alexa: !input send_second_alexa

      # message/title inputs
      title_initial_in: !input title_initial
      msg_initial_in:   !input msg_initial
      title_first_in:   !input title_first
      msg_first_in:     !input msg_first
      title_second_in:  !input title_second
      msg_second_in:    !input msg_second
      close_btn_in:     !input close_button_label

      # naming
      custom_name_sensor_1: !input custom_name_sensor_1
      custom_name_sensor_2: !input custom_name_sensor_2

      # services/devices
      mobile_notify_service: !input mobile_notify_service
      alexa_entity: !input alexa_target

  # Identify door & names (use SENSOR name by default; allow per-sensor custom names)
  - variables:
      door_sensor: "{{ trigger.entity_id }}"
      door_cover: "{{ cover_map[trigger.entity_id] }}"
      # Build a name map by order: sensor 1 -> custom_name1, sensor 2 -> custom_name2
      name_map: >-
        {{ dict([
          ((sensor_list[0] if (sensor_list|length) > 0 else ''), custom_name_sensor_1),
          ((sensor_list[1] if (sensor_list|length) > 1 else ''), custom_name_sensor_2)
        ]) }}
      # Choose: custom name (if provided) else sensor's friendly name else entity_id
      door_name_real: >-
        {{ (name_map.get(door_sensor) or '').strip()
           or (state_attr(door_sensor, 'friendly_name') or door_sensor) }}

  # Safe placeholder substitution:
  #  - Prefer [[ door_name ]] (won't be pre-rendered by HA)
  #  - Also replace {{ door_name }} if it survived
  #  - If neither placeholder exists, append the name so it's always present
  - variables:
      _has_dn_initial: "{{ ('[[ door_name' in msg_initial_in) or ('{{ door_name' in msg_initial_in) }}"
      _has_dn_first:   "{{ ('[[ door_name' in msg_first_in)   or ('{{ door_name' in msg_first_in) }}"
      _has_dn_second:  "{{ ('[[ door_name' in msg_second_in)  or ('{{ door_name' in msg_second_in) }}"
      _has_dn_btn:     "{{ ('[[ door_name' in close_btn_in)   or ('{{ door_name' in close_btn_in) }}"

      title_initial: "{{ title_initial_in }}"
      title_first:   "{{ title_first_in }}"
      title_second:  "{{ title_second_in }}"

      msg_initial_stage1: "{{ msg_initial_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      msg_first_stage1:   "{{ msg_first_in   | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      msg_second_stage1:  "{{ msg_second_in  | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      btn_label_stage1:   "{{ close_btn_in   | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"

      msg_initial: >
        {% if _has_dn_initial %}{{ msg_initial_stage1 }}
        {% else %}{{ msg_initial_stage1 ~ ' — ' ~ door_name_real }}{% endif %}
      msg_first: >
        {% if _has_dn_first %}{{ msg_first_stage1 }}
        {% else %}{{ msg_first_stage1 ~ ' — ' ~ door_name_real }}{% endif %}
      msg_second: >
        {% if _has_dn_second %}{{ msg_second_stage1 }}
        {% else %}{{ msg_second_stage1 ~ ' — ' ~ door_name_real }}{% endif %}
      btn_label: >
        {% if _has_dn_btn %}{{ btn_label_stage1 }}
        {% else %}{{ btn_label_stage1 ~ ' ' ~ door_name_real }}{% endif %}

  # Initial alert
  - parallel:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ send_initial_phone | bool }}"
            sequence:
              - service: !input mobile_notify_service
                data:
                  title: "{{ title_initial }}"
                  message: "{{ msg_initial }}"
                  data:
                    actions:
                      - action: "CLOSE_{{ door_sensor }}"
                        title: "{{ btn_label }}"
        default: []

      - choose:
          - conditions:
              - condition: template
                value_template: "{{ send_initial_alexa | bool }}"
            sequence:
              - service: notify.alexa_media
                data:
                  target: "{{ alexa_entity }}"
                  message: "{{ msg_initial }}"
                  data:
                    type: announce
        default: []

  # First reminder
  - delay: "{{ (first_delay | int) * 60 }}"
  - condition: template
    value_template: "{{ is_state(door_sensor, 'on') }}"
  - parallel:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ send_first_phone | bool }}"
            sequence:
              - service: !input mobile_notify_service
                data:
                  title: "{{ title_first }}"
                  message: "{{ msg_first }}"
                  data:
                    actions:
                      - action: "CLOSE_{{ door_sensor }}"
                        title: "{{ btn_label }}"
        default: []

      - choose:
          - conditions:
              - condition: template
                value_template: "{{ send_first_alexa | bool }}"
            sequence:
              - service: notify.alexa_media
                data:
                  target: "{{ alexa_entity }}"
                  message: "{{ msg_first }}"
                  data:
                    type: announce
        default: []

  # Second reminder (total time = second_delay)
  - variables:
      remaining_minutes: "{{ max((second_delay | int) - (first_delay | int), 0) }}"
  - delay: "{{ remaining_minutes * 60 }}"
  - condition: template
    value_template: "{{ is_state(door_sensor, 'on') }}"
  - parallel:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ send_second_phone | bool }}"
            sequence:
              - service: !input mobile_notify_service
                data:
                  title: "{{ title_second }}"
                  message: "{{ msg_second }}"
                  data:
                    actions:
                      - action: "CLOSE_{{ door_sensor }}"
                        title: "{{ btn_label }}"
        default: []

      - choose:
          - conditions:
              - condition: template
                value_template: "{{ send_second_alexa | bool }}"
            sequence:
              - service: notify.alexa_media
                data:
                  target: "{{ alexa_entity }}"
                  message: "{{ msg_second }}"
                  data:
                    type: announce
        default: []
        
