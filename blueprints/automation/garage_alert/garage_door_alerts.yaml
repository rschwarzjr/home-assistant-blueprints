blueprint:
  name: Garage Door Open Alerts (Quiet Hours, Multi-Channel, 3 Stages + Close Button)
  description: >
    Sends friendly mobile notifications and/or Alexa announcements when a garage door opens,
    plus reminders after configurable delays (Stage 1, Stage 2, Stage 3). Includes a Close
    button for phone notifications. Supports separate Quiet Hours for Phone and Alexa.

    Placeholders you can use in titles/messages:
      - [[ door_name ]]  (recommended; won't be pre-rendered by HA)
      - {{ door_name }}  (also supported)

  domain: automation

  input:
    # 1) SETUP: Sensors & Covers (order matters)
    garage_door_sensors:
      name: Garage Door Sensors (choose in order)
      description: First = sensor 1, Second = sensor 2 (order matters)
      selector:
        entity:
          multiple: true
          domain: binary_sensor

    garage_door_covers:
      name: Matching Cover Entities (same order)
      description: Covers for each sensor, in the same order
      selector:
        entity:
          multiple: true
          domain: cover

    # 2) OPTIONAL NAMES (by order)
    custom_name_sensor_1:
      name: Custom name for Sensor 1 (optional)
      description: Leave blank to use Sensor 1's friendly name
      default: ""
      selector:
        text:
    custom_name_sensor_2:
      name: Custom name for Sensor 2 (optional)
      description: Leave blank to use Sensor 2's friendly name
      default: ""
      selector:
        text:

    # 3) CHANNELS: Phones (up to 3) & Alexa targets
    mobile_notify_service_1:
      name: Phone notify service (primary)
      description: e.g., notify.mobile_app_robert_schwarz
      selector:
        select:
          options:
            - notify.mobile_app_robert_schwarz
          custom_value: true
    mobile_notify_service_2:
      name: Phone notify service (secondary, optional)
      default: ""
      selector:
        select:
          options: []
          custom_value: true
    mobile_notify_service_3:
      name: Phone notify service (tertiary, optional)
      default: ""
      selector:
        select:
          options: []
          custom_value: true

    alexa_targets:
      name: Alexa Devices
      description: One or more Alexa media_player entities
      selector:
        entity:
          multiple: true
          domain: media_player

    # 4) QUIET HOURS (separate for Phone and Alexa)
    phone_quiet_enabled:
      name: Quiet Hours for Phone
      default: false
      selector:
        boolean:
    phone_quiet_start:
      name: Phone Quiet Start
      default: "22:00:00"
      selector:
        time:
    phone_quiet_end:
      name: Phone Quiet End
      default: "07:00:00"
      selector:
        time:

    alexa_quiet_enabled:
      name: Quiet Hours for Alexa
      default: false
      selector:
        boolean:
    alexa_quiet_start:
      name: Alexa Quiet Start
      default: "22:00:00"
      selector:
        time:
    alexa_quiet_end:
      name: Alexa Quiet End
      default: "07:00:00"
      selector:
        time:

    # 5) DELAYS (Stage 1 & 2) + Stage 3 total
    first_delay_minutes:
      name: First reminder after (minutes)
      default: 10
      selector:
        number:
          min: 1
          max: 120
          mode: slider
          unit_of_measurement: minutes

    second_delay_minutes:
      name: Second reminder after (minutes total)
      default: 60
      selector:
        number:
          min: 2
          max: 240
          mode: slider
          unit_of_measurement: minutes

    third_delay_minutes:
      name: Third reminder after (minutes total)
      default: 180
      selector:
        number:
          min: 5
          max: 720
          mode: slider
          unit_of_measurement: minutes

    # 6) INITIAL ALERT (Stage 0)
    send_initial_phone:
      name: Initial alert → Phone
      default: true
      selector:
        boolean:
    send_initial_alexa:
      name: Initial alert → Alexa
      default: true
      selector:
        boolean:
    title_initial:
      name: Initial alert title
      default: "🚪 Garage Alert"
      selector:
        text:
    msg_initial:
      name: Initial alert message
      default: "Hey! [[ door_name ]] was just opened."
      selector:
        text:
    alexa_question_initial:
      name: Alexa question (initial; optional)
      default: "Do you want me to close it?"
      selector:
        text:
    close_button_label:
      name: Phone button label
      default: "Close [[ door_name ]]"
      selector:
        text:

    # 7) STAGE 1 (First reminder)
    send_first_phone:
      name: First reminder → Phone
      default: true
      selector:
        boolean:
    send_first_alexa:
      name: First reminder → Alexa
      default: true
      selector:
        boolean:
    title_first:
      name: First reminder title
      default: "⏱️ Garage Reminder"
      selector:
        text:
    msg_first:
      name: First reminder message
      default: "Heads up! [[ door_name ]] has been open for {{ first_delay }} minutes."
      selector:
        text:
    alexa_question_first:
      name: Alexa question (stage 1; optional)
      default: "Do you want me to close it?"
      selector:
        text:

    # 8) STAGE 2 (Second total delay)
    send_second_phone:
      name: Second reminder → Phone
      default: true
      selector:
        boolean:
    send_second_alexa:
      name: Second reminder → Alexa
      default: true
      selector:
        boolean:
    title_second:
      name: Second reminder title
      default: "⌛ Garage Still Open"
      selector:
        text:
    msg_second:
      name: Second reminder message
      default: "FYI — [[ door_name ]] has been open for {{ second_delay }} minutes."
      selector:
        text:
    alexa_question_second:
      name: Alexa question (stage 2; optional)
      default: "Do you want me to close it?"
      selector:
        text:

    # 9) STAGE 3 (Third total delay)
    send_third_phone:
      name: Third reminder → Phone
      default: true
      selector:
        boolean:
    send_third_alexa:
      name: Third reminder → Alexa
      default: true
      selector:
        boolean:
    title_third:
      name: Third reminder title
      default: "⚠️ Garage Still Open"
      selector:
        text:
    msg_third:
      name: Third reminder message
      default: "Reminder: [[ door_name ]] has been open for {{ third_delay }} minutes."
      selector:
        text:
    alexa_question_third:
      name: Alexa question (stage 3; optional)
      default: "Do you want me to close it?"
      selector:
        text:

trigger:
  - platform: state
    entity_id: !input garage_door_sensors
    from: 'off'
    to: 'on'

mode: parallel
max: 10

action:
  # Inputs & maps
  - variables:
      sensor_list: !input garage_door_sensors
      cover_list: !input garage_door_covers
      cover_map: "{{ dict(zip(sensor_list, cover_list)) }}"
      custom1: !input custom_name_sensor_1
      custom2: !input custom_name_sensor_2
      first_delay:  !input first_delay_minutes
      second_delay: !input second_delay_minutes
      third_delay:  !input third_delay_minutes
      send_initial_phone: !input send_initial_phone
      send_initial_alexa: !input send_initial_alexa
      send_first_phone:   !input send_first_phone
      send_first_alexa:   !input send_first_alexa
      send_second_phone:  !input send_second_phone
      send_second_alexa:  !input send_second_alexa
      send_third_phone:   !input send_third_phone
      send_third_alexa:   !input send_third_alexa
      phone_quiet_enabled: !input phone_quiet_enabled
      phone_quiet_start:   !input phone_quiet_start
      phone_quiet_end:     !input phone_quiet_end
      alexa_quiet_enabled: !input alexa_quiet_enabled
      alexa_quiet_start:   !input alexa_quiet_start
      alexa_quiet_end:     !input alexa_quiet_end
      title_initial_in: !input title_initial
      msg_initial_in:   !input msg_initial
      title_first_in:   !input title_first
      msg_first_in:     !input msg_first
      title_second_in:  !input title_second
      msg_second_in:    !input msg_second
      title_third_in:   !input title_third
      msg_third_in:     !input msg_third
      close_btn_in:     !input close_button_label
      svc1: !input mobile_notify_service_1
      svc2: !input mobile_notify_service_2
      svc3: !input mobile_notify_service_3
      alexa_targets: !input alexa_targets
      alexa_q_initial: !input alexa_question_initial
      alexa_q_first:   !input alexa_question_first
      alexa_q_second:  !input alexa_question_second
      alexa_q_third:   !input alexa_question_third

  # Who triggered & display name (sensor name with optional overrides)
  - variables:
      door_sensor: "{{ trigger.entity_id }}"
      door_cover:  "{{ cover_map[trigger.entity_id] }}"
      name_map: >-
        {{ dict([
          ((sensor_list[0] if (sensor_list|length)>0 else ''), (custom1 if custom1|length>0 else (state_attr(sensor_list[0], 'friendly_name') if (sensor_list|length)>0 else ''))),
          ((sensor_list[1] if (sensor_list|length)>1 else ''), (custom2 if custom2|length>0 else (state_attr(sensor_list[1], 'friendly_name') if (sensor_list|length)>1 else '')))
        ]) }}
      door_name_real: "{{ name_map.get(door_sensor) or door_sensor }}"

  # Final titles/messages/button label
  - variables:
      title_initial: "{{ title_initial_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      msg_initial:   "{{ (msg_initial_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real)) or ('Door opened — ' ~ door_name_real) }}"
      title_first:   "{{ title_first_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      msg_first:     "{{ msg_first_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      title_second:  "{{ title_second_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      msg_second:    "{{ msg_second_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      title_third:   "{{ title_third_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      msg_third:     "{{ msg_third_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
      btn_label:     "{{ close_btn_in | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"

  # Quiet hour helpers (per-channel). Works across midnight.
  - variables:
      _now_sec: "{{ now().hour*3600 + now().minute*60 + now().second }}"
      _p_start: "{{ strptime(phone_quiet_start, '%H:%M:%S').hour*3600 + strptime(phone_quiet_start, '%H:%M:%S').minute*60 + strptime(phone_quiet_start, '%H:%M:%S').second }}"
      _p_end:   "{{ strptime(phone_quiet_end,   '%H:%M:%S').hour*3600 + strptime(phone_quiet_end,   '%H:%M:%S').minute*60 + strptime(phone_quiet_end,   '%H:%M:%S').second }}"
      _a_start: "{{ strptime(alexa_quiet_start, '%H:%M:%S').hour*3600 + strptime(alexa_quiet_start, '%H:%M:%S').minute*60 + strptime(alexa_quiet_start, '%H:%M:%S').second }}"
      _a_end:   "{{ strptime(alexa_quiet_end,   '%H:%M:%S').hour*3600 + strptime(alexa_quiet_end,   '%H:%M:%S').minute*60 + strptime(alexa_quiet_end,   '%H:%M:%S').second }}"
      phone_quiet_now: >
        {% if not phone_quiet_enabled %}false
        {% else %}
          {% if _p_start <= _p_end %}
            {{ (_now_sec >= _p_start) and (_now_sec < _p_end) }}
          {% else %}
            {{ (_now_sec >= _p_start) or (_now_sec < _p_end) }}
          {% endif %}
        {% endif %}
      alexa_quiet_now: >
        {% if not alexa_quiet_enabled %}false
        {% else %}
          {% if _a_start <= _a_end %}
            {{ (_now_sec >= _a_start) and (_now_sec < _a_end) }}
          {% else %}
            {{ (_now_sec >= _a_start) or (_now_sec < _a_end) }}
          {% endif %}
        {% endif %}

  ####################################
  # Initial alert
  ####################################
  # PHONE: build a list of non-empty services and loop over them
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_initial_phone | bool) and (not phone_quiet_now) }}"
        sequence:
          - variables:
              notify_services: "{{ [svc1, svc2, svc3] | reject('equalto','') | list }}"
          - repeat:
              for_each: "{{ notify_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "{{ title_initial }}"
                    message: "{{ msg_initial }}"
                    data:
                      actions:
                        - action: "CLOSE_{{ door_sensor }}"
                          title: "{{ btn_label }}"
    default: []

  # ALEXA
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_initial_alexa | bool) and (not alexa_quiet_now) }}"
        sequence:
          - service: notify.alexa_media
            data:
              target: !input alexa_targets
              message: "{{ msg_initial }}"
              data:
                type: announce
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ alexa_q_initial | length > 0 }}"
                sequence:
                  - service: notify.alexa_media
                    data:
                      target: !input alexa_targets
                      message: "{{ alexa_q_initial | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
                      data:
                        type: announce
    default: []

  ####################################
  # Stage 1 (first delay)
  ####################################
  - delay: "{{ (first_delay | int) * 60 }}"
  - condition: template
    value_template: "{{ is_state(door_sensor, 'on') }}"

  # PHONE
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_first_phone | bool) and (not phone_quiet_now) }}"
        sequence:
          - variables:
              notify_services: "{{ [svc1, svc2, svc3] | reject('equalto','') | list }}"
          - repeat:
              for_each: "{{ notify_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "{{ title_first }}"
                    message: "{{ msg_first }}"
                    data:
                      actions:
                        - action: "CLOSE_{{ door_sensor }}"
                          title: "{{ btn_label }}"
    default: []

  # ALEXA
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_first_alexa | bool) and (not alexa_quiet_now) }}"
        sequence:
          - service: notify.alexa_media
            data:
              target: !input alexa_targets
              message: "{{ msg_first }}"
              data:
                type: announce
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ alexa_q_first | length > 0 }}"
                sequence:
                  - service: notify.alexa_media
                    data:
                      target: !input alexa_targets
                      message: "{{ alexa_q_first | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
                      data:
                        type: announce
    default: []

  ####################################
  # Stage 2 (second total delay)
  ####################################
  - variables:
      remaining_minutes: "{{ max((second_delay | int) - (first_delay | int), 0) }}"
  - delay: "{{ remaining_minutes * 60 }}"
  - condition: template
    value_template: "{{ is_state(door_sensor, 'on') }}"

  # PHONE
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_second_phone | bool) and (not phone_quiet_now) }}"
        sequence:
          - variables:
              notify_services: "{{ [svc1, svc2, svc3] | reject('equalto','') | list }}"
          - repeat:
              for_each: "{{ notify_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "{{ title_second }}"
                    message: "{{ msg_second }}"
                    data:
                      actions:
                        - action: "CLOSE_{{ door_sensor }}"
                          title: "{{ btn_label }}"
    default: []

  # ALEXA
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_second_alexa | bool) and (not alexa_quiet_now) }}"
        sequence:
          - service: notify.alexa_media
            data:
              target: !input alexa_targets
              message: "{{ msg_second }}"
              data:
                type: announce
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ alexa_q_second | length > 0 }}"
                sequence:
                  - service: notify.alexa_media
                    data:
                      target: !input alexa_targets
                      message: "{{ alexa_q_second | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
                      data:
                        type: announce
    default: []

  ####################################
  # Stage 3 (third total delay)
  ####################################
  - variables:
      remaining_minutes_2: "{{ max((third_delay | int) - (second_delay | int), 0) }}"
  - delay: "{{ remaining_minutes_2 * 60 }}"
  - condition: template
    value_template: "{{ is_state(door_sensor, 'on') }}"

  # PHONE
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_third_phone | bool) and (not phone_quiet_now) }}"
        sequence:
          - variables:
              notify_services: "{{ [svc1, svc2, svc3] | reject('equalto','') | list }}"
          - repeat:
              for_each: "{{ notify_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "{{ title_third }}"
                    message: "{{ msg_third }}"
                    data:
                      actions:
                        - action: "CLOSE_{{ door_sensor }}"
                          title: "{{ btn_label }}"
    default: []

  # ALEXA
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (send_third_alexa | bool) and (not alexa_quiet_now) }}"
        sequence:
          - service: notify.alexa_media
            data:
              target: !input alexa_targets
              message: "{{ msg_third }}"
              data:
                type: announce
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ alexa_q_third | length > 0 }}"
                sequence:
                  - service: notify.alexa_media
                    data:
                      target: !input alexa_targets
                      message: "{{ alexa_q_third | replace('[[ door_name ]]', door_name_real) | replace('{{ door_name }}', door_name_real) }}"
                      data:
                        type: announce
    default: []
    
